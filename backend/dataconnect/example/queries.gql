mutation CreateResource($name: String!, $description: String!, $category: String!, $availabilityStatus: String!, $ownerId: UUID!) @auth(level: USER) {
  resource_insert(data: {
    name: $name,
    description: $description,
    category: $category,
    availabilityStatus: $availabilityStatus,
    ownerId: $ownerId
  })
}

query ListAvailableResources @auth(level: PUBLIC) {
  resources(where: {availabilityStatus: {eq: "available"}}) {
    id
    name
    description
    category
    location
    imageUrls
  }
}

mutation GiveFeedback($subjectUserId: UUID, $subjectResourceId: UUID, $transactionId: UUID, $comment: String!, $feedbackType: String!, $rating: Int!) @auth(level: USER) {
  feedback_insert(data: {
    subjectUserId: $subjectUserId,
    subjectResourceId: $subjectResourceId,
    transactionId: $transactionId,
    comment: $comment,
    feedbackType: $feedbackType,
    rating: $rating,
    createdAt_expr: "request.time"
  })
}

query GetUserTransactions($userId: UUID!) @auth(level: USER) {
  transactions(where: {requesterId: {eq: $userId}}) {
    id
    resource {
      name
      description
    }
    status
    createdAt
  }
}